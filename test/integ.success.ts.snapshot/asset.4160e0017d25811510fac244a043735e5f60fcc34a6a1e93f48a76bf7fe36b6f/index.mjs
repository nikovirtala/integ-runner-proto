import { createRequire as topLevelCreateRequire } from 'module';const require = topLevelCreateRequire(import.meta.url)
var Oe=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,n)=>(typeof require<"u"?require:r)[n]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var w=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports);var Ne=w(te=>{var Re="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");te.encode=function(e){if(0<=e&&e<Re.length)return Re[e];throw new TypeError("Must be between 0 and 63: "+e)};te.decode=function(e){var r=65,n=90,t=97,o=122,i=48,s=57,a=43,u=47,l=26,c=52;return r<=e&&e<=n?e-r:t<=e&&e<=o?e-t+l:i<=e&&e<=s?e-i+c:e==a?62:e==u?63:-1}});var se=w(ie=>{var xe=Ne(),oe=5,Ie=1<<oe,Pe=Ie-1,Te=Ie;function vr(e){return e<0?(-e<<1)+1:(e<<1)+0}function mr(e){var r=(e&1)===1,n=e>>1;return r?-n:n}ie.encode=function(r){var n="",t,o=vr(r);do t=o&Pe,o>>>=oe,o>0&&(t|=Te),n+=xe.encode(t);while(o>0);return n};ie.decode=function(r,n,t){var o=r.length,i=0,s=0,a,u;do{if(n>=o)throw new Error("Expected more digits in base 64 VLQ value.");if(u=xe.decode(r.charCodeAt(n++)),u===-1)throw new Error("Invalid base64 digit: "+r.charAt(n-1));a=!!(u&Te),u&=Pe,i=i+(u<<s),s+=oe}while(a);t.value=mr(i),t.rest=n}});var U=w(y=>{function _r(e,r,n){if(r in e)return e[r];if(arguments.length===3)return n;throw new Error('"'+r+'" is a required argument.')}y.getArg=_r;var Be=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,yr=/^data:.+\,.+$/;function k(e){var r=e.match(Be);return r?{scheme:r[1],auth:r[2],host:r[3],port:r[4],path:r[5]}:null}y.urlParse=k;function G(e){var r="";return e.scheme&&(r+=e.scheme+":"),r+="//",e.auth&&(r+=e.auth+"@"),e.host&&(r+=e.host),e.port&&(r+=":"+e.port),e.path&&(r+=e.path),r}y.urlGenerate=G;function ue(e){var r=e,n=k(e);if(n){if(!n.path)return e;r=n.path}for(var t=y.isAbsolute(r),o=r.split(/\/+/),i,s=0,a=o.length-1;a>=0;a--)i=o[a],i==="."?o.splice(a,1):i===".."?s++:s>0&&(i===""?(o.splice(a+1,s),s=0):(o.splice(a,2),s--));return r=o.join("/"),r===""&&(r=t?"/":"."),n?(n.path=r,G(n)):r}y.normalize=ue;function Ge(e,r){e===""&&(e="."),r===""&&(r=".");var n=k(r),t=k(e);if(t&&(e=t.path||"/"),n&&!n.scheme)return t&&(n.scheme=t.scheme),G(n);if(n||r.match(yr))return r;if(t&&!t.host&&!t.path)return t.host=r,G(t);var o=r.charAt(0)==="/"?r:ue(e.replace(/\/+$/,"")+"/"+r);return t?(t.path=o,G(t)):o}y.join=Ge;y.isAbsolute=function(e){return e.charAt(0)==="/"||Be.test(e)};function Sr(e,r){e===""&&(e="."),e=e.replace(/\/$/,"");for(var n=0;r.indexOf(e+"/")!==0;){var t=e.lastIndexOf("/");if(t<0||(e=e.slice(0,t),e.match(/^([^\/]+:\/)?\/*$/)))return r;++n}return Array(n+1).join("../")+r.substr(e.length+1)}y.relative=Sr;var je=function(){var e=Object.create(null);return!("__proto__"in e)}();function Ue(e){return e}function wr(e){return Fe(e)?"$"+e:e}y.toSetString=je?Ue:wr;function Cr(e){return Fe(e)?e.slice(1):e}y.fromSetString=je?Ue:Cr;function Fe(e){if(!e)return!1;var r=e.length;if(r<9||e.charCodeAt(r-1)!==95||e.charCodeAt(r-2)!==95||e.charCodeAt(r-3)!==111||e.charCodeAt(r-4)!==116||e.charCodeAt(r-5)!==111||e.charCodeAt(r-6)!==114||e.charCodeAt(r-7)!==112||e.charCodeAt(r-8)!==95||e.charCodeAt(r-9)!==95)return!1;for(var n=r-10;n>=0;n--)if(e.charCodeAt(n)!==36)return!1;return!0}function Mr(e,r,n){var t=j(e.source,r.source);return t!==0||(t=e.originalLine-r.originalLine,t!==0)||(t=e.originalColumn-r.originalColumn,t!==0||n)||(t=e.generatedColumn-r.generatedColumn,t!==0)||(t=e.generatedLine-r.generatedLine,t!==0)?t:j(e.name,r.name)}y.compareByOriginalPositions=Mr;function Er(e,r,n){var t=e.generatedLine-r.generatedLine;return t!==0||(t=e.generatedColumn-r.generatedColumn,t!==0||n)||(t=j(e.source,r.source),t!==0)||(t=e.originalLine-r.originalLine,t!==0)||(t=e.originalColumn-r.originalColumn,t!==0)?t:j(e.name,r.name)}y.compareByGeneratedPositionsDeflated=Er;function j(e,r){return e===r?0:e===null?1:r===null?-1:e>r?1:-1}function br(e,r){var n=e.generatedLine-r.generatedLine;return n!==0||(n=e.generatedColumn-r.generatedColumn,n!==0)||(n=j(e.source,r.source),n!==0)||(n=e.originalLine-r.originalLine,n!==0)||(n=e.originalColumn-r.originalColumn,n!==0)?n:j(e.name,r.name)}y.compareByGeneratedPositionsInflated=br;function Lr(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))}y.parseSourceMapInput=Lr;function Ar(e,r,n){if(r=r||"",e&&(e[e.length-1]!=="/"&&r[0]!=="/"&&(e+="/"),r=e+r),n){var t=k(n);if(!t)throw new Error("sourceMapURL could not be parsed");if(t.path){var o=t.path.lastIndexOf("/");o>=0&&(t.path=t.path.substring(0,o+1))}r=Ge(G(t),r)}return ue(r)}y.computeSourceURL=Ar});var ce=w(De=>{var ae=U(),le=Object.prototype.hasOwnProperty,x=typeof Map<"u";function A(){this._array=[],this._set=x?new Map:Object.create(null)}A.fromArray=function(r,n){for(var t=new A,o=0,i=r.length;o<i;o++)t.add(r[o],n);return t};A.prototype.size=function(){return x?this._set.size:Object.getOwnPropertyNames(this._set).length};A.prototype.add=function(r,n){var t=x?r:ae.toSetString(r),o=x?this.has(r):le.call(this._set,t),i=this._array.length;(!o||n)&&this._array.push(r),o||(x?this._set.set(r,i):this._set[t]=i)};A.prototype.has=function(r){if(x)return this._set.has(r);var n=ae.toSetString(r);return le.call(this._set,n)};A.prototype.indexOf=function(r){if(x){var n=this._set.get(r);if(n>=0)return n}else{var t=ae.toSetString(r);if(le.call(this._set,t))return this._set[t]}throw new Error('"'+r+'" is not in the set.')};A.prototype.at=function(r){if(r>=0&&r<this._array.length)return this._array[r];throw new Error("No element indexed by "+r)};A.prototype.toArray=function(){return this._array.slice()};De.ArraySet=A});var ze=w(ke=>{var qe=U();function Or(e,r){var n=e.generatedLine,t=r.generatedLine,o=e.generatedColumn,i=r.generatedColumn;return t>n||t==n&&i>=o||qe.compareByGeneratedPositionsInflated(e,r)<=0}function J(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}J.prototype.unsortedForEach=function(r,n){this._array.forEach(r,n)};J.prototype.add=function(r){Or(this._last,r)?(this._last=r,this._array.push(r)):(this._sorted=!1,this._array.push(r))};J.prototype.toArray=function(){return this._sorted||(this._array.sort(qe.compareByGeneratedPositionsInflated),this._sorted=!0),this._array};ke.MappingList=J});var fe=w(Ke=>{var z=se(),v=U(),X=ce().ArraySet,Rr=ze().MappingList;function E(e){e||(e={}),this._file=v.getArg(e,"file",null),this._sourceRoot=v.getArg(e,"sourceRoot",null),this._skipValidation=v.getArg(e,"skipValidation",!1),this._sources=new X,this._names=new X,this._mappings=new Rr,this._sourcesContents=null}E.prototype._version=3;E.fromSourceMap=function(r){var n=r.sourceRoot,t=new E({file:r.file,sourceRoot:n});return r.eachMapping(function(o){var i={generated:{line:o.generatedLine,column:o.generatedColumn}};o.source!=null&&(i.source=o.source,n!=null&&(i.source=v.relative(n,i.source)),i.original={line:o.originalLine,column:o.originalColumn},o.name!=null&&(i.name=o.name)),t.addMapping(i)}),r.sources.forEach(function(o){var i=o;n!==null&&(i=v.relative(n,o)),t._sources.has(i)||t._sources.add(i);var s=r.sourceContentFor(o);s!=null&&t.setSourceContent(o,s)}),t};E.prototype.addMapping=function(r){var n=v.getArg(r,"generated"),t=v.getArg(r,"original",null),o=v.getArg(r,"source",null),i=v.getArg(r,"name",null);this._skipValidation||this._validateMapping(n,t,o,i),o!=null&&(o=String(o),this._sources.has(o)||this._sources.add(o)),i!=null&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:n.line,generatedColumn:n.column,originalLine:t!=null&&t.line,originalColumn:t!=null&&t.column,source:o,name:i})};E.prototype.setSourceContent=function(r,n){var t=r;this._sourceRoot!=null&&(t=v.relative(this._sourceRoot,t)),n!=null?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[v.toSetString(t)]=n):this._sourcesContents&&(delete this._sourcesContents[v.toSetString(t)],Object.keys(this._sourcesContents).length===0&&(this._sourcesContents=null))};E.prototype.applySourceMap=function(r,n,t){var o=n;if(n==null){if(r.file==null)throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);o=r.file}var i=this._sourceRoot;i!=null&&(o=v.relative(i,o));var s=new X,a=new X;this._mappings.unsortedForEach(function(u){if(u.source===o&&u.originalLine!=null){var l=r.originalPositionFor({line:u.originalLine,column:u.originalColumn});l.source!=null&&(u.source=l.source,t!=null&&(u.source=v.join(t,u.source)),i!=null&&(u.source=v.relative(i,u.source)),u.originalLine=l.line,u.originalColumn=l.column,l.name!=null&&(u.name=l.name))}var c=u.source;c!=null&&!s.has(c)&&s.add(c);var h=u.name;h!=null&&!a.has(h)&&a.add(h)},this),this._sources=s,this._names=a,r.sources.forEach(function(u){var l=r.sourceContentFor(u);l!=null&&(t!=null&&(u=v.join(t,u)),i!=null&&(u=v.relative(i,u)),this.setSourceContent(u,l))},this)};E.prototype._validateMapping=function(r,n,t,o){if(n&&typeof n.line!="number"&&typeof n.column!="number")throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if(!(r&&"line"in r&&"column"in r&&r.line>0&&r.column>=0&&!n&&!t&&!o)){if(r&&"line"in r&&"column"in r&&n&&"line"in n&&"column"in n&&r.line>0&&r.column>=0&&n.line>0&&n.column>=0&&t)return;throw new Error("Invalid mapping: "+JSON.stringify({generated:r,source:t,original:n,name:o}))}};E.prototype._serializeMappings=function(){for(var r=0,n=1,t=0,o=0,i=0,s=0,a="",u,l,c,h,d=this._mappings.toArray(),p=0,M=d.length;p<M;p++){if(l=d[p],u="",l.generatedLine!==n)for(r=0;l.generatedLine!==n;)u+=";",n++;else if(p>0){if(!v.compareByGeneratedPositionsInflated(l,d[p-1]))continue;u+=","}u+=z.encode(l.generatedColumn-r),r=l.generatedColumn,l.source!=null&&(h=this._sources.indexOf(l.source),u+=z.encode(h-s),s=h,u+=z.encode(l.originalLine-1-o),o=l.originalLine-1,u+=z.encode(l.originalColumn-t),t=l.originalColumn,l.name!=null&&(c=this._names.indexOf(l.name),u+=z.encode(c-i),i=c)),a+=u}return a};E.prototype._generateSourcesContent=function(r,n){return r.map(function(t){if(!this._sourcesContents)return null;n!=null&&(t=v.relative(n,t));var o=v.toSetString(t);return Object.prototype.hasOwnProperty.call(this._sourcesContents,o)?this._sourcesContents[o]:null},this)};E.prototype.toJSON=function(){var r={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return this._file!=null&&(r.file=this._file),this._sourceRoot!=null&&(r.sourceRoot=this._sourceRoot),this._sourcesContents&&(r.sourcesContent=this._generateSourcesContent(r.sources,r.sourceRoot)),r};E.prototype.toString=function(){return JSON.stringify(this.toJSON())};Ke.SourceMapGenerator=E});var Ve=w(I=>{I.GREATEST_LOWER_BOUND=1;I.LEAST_UPPER_BOUND=2;function de(e,r,n,t,o,i){var s=Math.floor((r-e)/2)+e,a=o(n,t[s],!0);return a===0?s:a>0?r-s>1?de(s,r,n,t,o,i):i==I.LEAST_UPPER_BOUND?r<t.length?r:-1:s:s-e>1?de(e,s,n,t,o,i):i==I.LEAST_UPPER_BOUND?s:e<0?-1:e}I.search=function(r,n,t,o){if(n.length===0)return-1;var i=de(-1,n.length,r,n,t,o||I.GREATEST_LOWER_BOUND);if(i<0)return-1;for(;i-1>=0&&t(n[i],n[i-1],!0)===0;)--i;return i}});var We=w($e=>{function he(e,r,n){var t=e[r];e[r]=e[n],e[n]=t}function Nr(e,r){return Math.round(e+Math.random()*(r-e))}function pe(e,r,n,t){if(n<t){var o=Nr(n,t),i=n-1;he(e,o,t);for(var s=e[t],a=n;a<t;a++)r(e[a],s)<=0&&(i+=1,he(e,i,a));he(e,i+1,a);var u=i+1;pe(e,r,n,u-1),pe(e,r,u+1,t)}}$e.quickSort=function(e,r){pe(e,r,0,e.length-1)}});var Je=w(Z=>{var f=U(),ge=Ve(),F=ce().ArraySet,xr=se(),K=We().quickSort;function g(e,r){var n=e;return typeof e=="string"&&(n=f.parseSourceMapInput(e)),n.sections!=null?new b(n,r):new m(n,r)}g.fromSourceMap=function(e,r){return m.fromSourceMap(e,r)};g.prototype._version=3;g.prototype.__generatedMappings=null;Object.defineProperty(g.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}});g.prototype.__originalMappings=null;Object.defineProperty(g.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}});g.prototype._charIsMappingSeparator=function(r,n){var t=r.charAt(n);return t===";"||t===","};g.prototype._parseMappings=function(r,n){throw new Error("Subclasses must implement _parseMappings")};g.GENERATED_ORDER=1;g.ORIGINAL_ORDER=2;g.GREATEST_LOWER_BOUND=1;g.LEAST_UPPER_BOUND=2;g.prototype.eachMapping=function(r,n,t){var o=n||null,i=t||g.GENERATED_ORDER,s;switch(i){case g.GENERATED_ORDER:s=this._generatedMappings;break;case g.ORIGINAL_ORDER:s=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var a=this.sourceRoot;s.map(function(u){var l=u.source===null?null:this._sources.at(u.source);return l=f.computeSourceURL(a,l,this._sourceMapURL),{source:l,generatedLine:u.generatedLine,generatedColumn:u.generatedColumn,originalLine:u.originalLine,originalColumn:u.originalColumn,name:u.name===null?null:this._names.at(u.name)}},this).forEach(r,o)};g.prototype.allGeneratedPositionsFor=function(r){var n=f.getArg(r,"line"),t={source:f.getArg(r,"source"),originalLine:n,originalColumn:f.getArg(r,"column",0)};if(t.source=this._findSourceIndex(t.source),t.source<0)return[];var o=[],i=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",f.compareByOriginalPositions,ge.LEAST_UPPER_BOUND);if(i>=0){var s=this._originalMappings[i];if(r.column===void 0)for(var a=s.originalLine;s&&s.originalLine===a;)o.push({line:f.getArg(s,"generatedLine",null),column:f.getArg(s,"generatedColumn",null),lastColumn:f.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i];else for(var u=s.originalColumn;s&&s.originalLine===n&&s.originalColumn==u;)o.push({line:f.getArg(s,"generatedLine",null),column:f.getArg(s,"generatedColumn",null),lastColumn:f.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i]}return o};Z.SourceMapConsumer=g;function m(e,r){var n=e;typeof e=="string"&&(n=f.parseSourceMapInput(e));var t=f.getArg(n,"version"),o=f.getArg(n,"sources"),i=f.getArg(n,"names",[]),s=f.getArg(n,"sourceRoot",null),a=f.getArg(n,"sourcesContent",null),u=f.getArg(n,"mappings"),l=f.getArg(n,"file",null);if(t!=this._version)throw new Error("Unsupported version: "+t);s&&(s=f.normalize(s)),o=o.map(String).map(f.normalize).map(function(c){return s&&f.isAbsolute(s)&&f.isAbsolute(c)?f.relative(s,c):c}),this._names=F.fromArray(i.map(String),!0),this._sources=F.fromArray(o,!0),this._absoluteSources=this._sources.toArray().map(function(c){return f.computeSourceURL(s,c,r)}),this.sourceRoot=s,this.sourcesContent=a,this._mappings=u,this._sourceMapURL=r,this.file=l}m.prototype=Object.create(g.prototype);m.prototype.consumer=g;m.prototype._findSourceIndex=function(e){var r=e;if(this.sourceRoot!=null&&(r=f.relative(this.sourceRoot,r)),this._sources.has(r))return this._sources.indexOf(r);var n;for(n=0;n<this._absoluteSources.length;++n)if(this._absoluteSources[n]==e)return n;return-1};m.fromSourceMap=function(r,n){var t=Object.create(m.prototype),o=t._names=F.fromArray(r._names.toArray(),!0),i=t._sources=F.fromArray(r._sources.toArray(),!0);t.sourceRoot=r._sourceRoot,t.sourcesContent=r._generateSourcesContent(t._sources.toArray(),t.sourceRoot),t.file=r._file,t._sourceMapURL=n,t._absoluteSources=t._sources.toArray().map(function(p){return f.computeSourceURL(t.sourceRoot,p,n)});for(var s=r._mappings.toArray().slice(),a=t.__generatedMappings=[],u=t.__originalMappings=[],l=0,c=s.length;l<c;l++){var h=s[l],d=new Qe;d.generatedLine=h.generatedLine,d.generatedColumn=h.generatedColumn,h.source&&(d.source=i.indexOf(h.source),d.originalLine=h.originalLine,d.originalColumn=h.originalColumn,h.name&&(d.name=o.indexOf(h.name)),u.push(d)),a.push(d)}return K(t.__originalMappings,f.compareByOriginalPositions),t};m.prototype._version=3;Object.defineProperty(m.prototype,"sources",{get:function(){return this._absoluteSources.slice()}});function Qe(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}m.prototype._parseMappings=function(r,n){for(var t=1,o=0,i=0,s=0,a=0,u=0,l=r.length,c=0,h={},d={},p=[],M=[],S,Q,_,B,Ae;c<l;)if(r.charAt(c)===";")t++,c++,o=0;else if(r.charAt(c)===",")c++;else{for(S=new Qe,S.generatedLine=t,B=c;B<l&&!this._charIsMappingSeparator(r,B);B++);if(Q=r.slice(c,B),_=h[Q],_)c+=Q.length;else{for(_=[];c<B;)xr.decode(r,c,d),Ae=d.value,c=d.rest,_.push(Ae);if(_.length===2)throw new Error("Found a source, but no line and column");if(_.length===3)throw new Error("Found a source and line, but no column");h[Q]=_}S.generatedColumn=o+_[0],o=S.generatedColumn,_.length>1&&(S.source=a+_[1],a+=_[1],S.originalLine=i+_[2],i=S.originalLine,S.originalLine+=1,S.originalColumn=s+_[3],s=S.originalColumn,_.length>4&&(S.name=u+_[4],u+=_[4])),M.push(S),typeof S.originalLine=="number"&&p.push(S)}K(M,f.compareByGeneratedPositionsDeflated),this.__generatedMappings=M,K(p,f.compareByOriginalPositions),this.__originalMappings=p};m.prototype._findMapping=function(r,n,t,o,i,s){if(r[t]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+r[t]);if(r[o]<0)throw new TypeError("Column must be greater than or equal to 0, got "+r[o]);return ge.search(r,n,i,s)};m.prototype.computeColumnSpans=function(){for(var r=0;r<this._generatedMappings.length;++r){var n=this._generatedMappings[r];if(r+1<this._generatedMappings.length){var t=this._generatedMappings[r+1];if(n.generatedLine===t.generatedLine){n.lastGeneratedColumn=t.generatedColumn-1;continue}}n.lastGeneratedColumn=1/0}};m.prototype.originalPositionFor=function(r){var n={generatedLine:f.getArg(r,"line"),generatedColumn:f.getArg(r,"column")},t=this._findMapping(n,this._generatedMappings,"generatedLine","generatedColumn",f.compareByGeneratedPositionsDeflated,f.getArg(r,"bias",g.GREATEST_LOWER_BOUND));if(t>=0){var o=this._generatedMappings[t];if(o.generatedLine===n.generatedLine){var i=f.getArg(o,"source",null);i!==null&&(i=this._sources.at(i),i=f.computeSourceURL(this.sourceRoot,i,this._sourceMapURL));var s=f.getArg(o,"name",null);return s!==null&&(s=this._names.at(s)),{source:i,line:f.getArg(o,"originalLine",null),column:f.getArg(o,"originalColumn",null),name:s}}}return{source:null,line:null,column:null,name:null}};m.prototype.hasContentsOfAllSources=function(){return this.sourcesContent?this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(r){return r==null}):!1};m.prototype.sourceContentFor=function(r,n){if(!this.sourcesContent)return null;var t=this._findSourceIndex(r);if(t>=0)return this.sourcesContent[t];var o=r;this.sourceRoot!=null&&(o=f.relative(this.sourceRoot,o));var i;if(this.sourceRoot!=null&&(i=f.urlParse(this.sourceRoot))){var s=o.replace(/^file:\/\//,"");if(i.scheme=="file"&&this._sources.has(s))return this.sourcesContent[this._sources.indexOf(s)];if((!i.path||i.path=="/")&&this._sources.has("/"+o))return this.sourcesContent[this._sources.indexOf("/"+o)]}if(n)return null;throw new Error('"'+o+'" is not in the SourceMap.')};m.prototype.generatedPositionFor=function(r){var n=f.getArg(r,"source");if(n=this._findSourceIndex(n),n<0)return{line:null,column:null,lastColumn:null};var t={source:n,originalLine:f.getArg(r,"line"),originalColumn:f.getArg(r,"column")},o=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",f.compareByOriginalPositions,f.getArg(r,"bias",g.GREATEST_LOWER_BOUND));if(o>=0){var i=this._originalMappings[o];if(i.source===t.source)return{line:f.getArg(i,"generatedLine",null),column:f.getArg(i,"generatedColumn",null),lastColumn:f.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}};Z.BasicSourceMapConsumer=m;function b(e,r){var n=e;typeof e=="string"&&(n=f.parseSourceMapInput(e));var t=f.getArg(n,"version"),o=f.getArg(n,"sections");if(t!=this._version)throw new Error("Unsupported version: "+t);this._sources=new F,this._names=new F;var i={line:-1,column:0};this._sections=o.map(function(s){if(s.url)throw new Error("Support for url field in sections not implemented.");var a=f.getArg(s,"offset"),u=f.getArg(a,"line"),l=f.getArg(a,"column");if(u<i.line||u===i.line&&l<i.column)throw new Error("Section offsets must be ordered and non-overlapping.");return i=a,{generatedOffset:{generatedLine:u+1,generatedColumn:l+1},consumer:new g(f.getArg(s,"map"),r)}})}b.prototype=Object.create(g.prototype);b.prototype.constructor=g;b.prototype._version=3;Object.defineProperty(b.prototype,"sources",{get:function(){for(var e=[],r=0;r<this._sections.length;r++)for(var n=0;n<this._sections[r].consumer.sources.length;n++)e.push(this._sections[r].consumer.sources[n]);return e}});b.prototype.originalPositionFor=function(r){var n={generatedLine:f.getArg(r,"line"),generatedColumn:f.getArg(r,"column")},t=ge.search(n,this._sections,function(i,s){var a=i.generatedLine-s.generatedOffset.generatedLine;return a||i.generatedColumn-s.generatedOffset.generatedColumn}),o=this._sections[t];return o?o.consumer.originalPositionFor({line:n.generatedLine-(o.generatedOffset.generatedLine-1),column:n.generatedColumn-(o.generatedOffset.generatedLine===n.generatedLine?o.generatedOffset.generatedColumn-1:0),bias:r.bias}):{source:null,line:null,column:null,name:null}};b.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(r){return r.consumer.hasContentsOfAllSources()})};b.prototype.sourceContentFor=function(r,n){for(var t=0;t<this._sections.length;t++){var o=this._sections[t],i=o.consumer.sourceContentFor(r,!0);if(i)return i}if(n)return null;throw new Error('"'+r+'" is not in the SourceMap.')};b.prototype.generatedPositionFor=function(r){for(var n=0;n<this._sections.length;n++){var t=this._sections[n];if(t.consumer._findSourceIndex(f.getArg(r,"source"))!==-1){var o=t.consumer.generatedPositionFor(r);if(o){var i={line:o.line+(t.generatedOffset.generatedLine-1),column:o.column+(t.generatedOffset.generatedLine===o.line?t.generatedOffset.generatedColumn-1:0)};return i}}}return{line:null,column:null}};b.prototype._parseMappings=function(r,n){this.__generatedMappings=[],this.__originalMappings=[];for(var t=0;t<this._sections.length;t++)for(var o=this._sections[t],i=o.consumer._generatedMappings,s=0;s<i.length;s++){var a=i[s],u=o.consumer._sources.at(a.source);u=f.computeSourceURL(o.consumer.sourceRoot,u,this._sourceMapURL),this._sources.add(u),u=this._sources.indexOf(u);var l=null;a.name&&(l=o.consumer._names.at(a.name),this._names.add(l),l=this._names.indexOf(l));var c={source:u,generatedLine:a.generatedLine+(o.generatedOffset.generatedLine-1),generatedColumn:a.generatedColumn+(o.generatedOffset.generatedLine===a.generatedLine?o.generatedOffset.generatedColumn-1:0),originalLine:a.originalLine,originalColumn:a.originalColumn,name:l};this.__generatedMappings.push(c),typeof c.originalLine=="number"&&this.__originalMappings.push(c)}K(this.__generatedMappings,f.compareByGeneratedPositionsDeflated),K(this.__originalMappings,f.compareByOriginalPositions)};Z.IndexedSourceMapConsumer=b});var Ze=w(Xe=>{var Ir=fe().SourceMapGenerator,Y=U(),Pr=/(\r?\n)/,Tr=10,D="$$$isSourceNode$$$";function C(e,r,n,t,o){this.children=[],this.sourceContents={},this.line=e??null,this.column=r??null,this.source=n??null,this.name=o??null,this[D]=!0,t!=null&&this.add(t)}C.fromStringWithSourceMap=function(r,n,t){var o=new C,i=r.split(Pr),s=0,a=function(){var d=M(),p=M()||"";return d+p;function M(){return s<i.length?i[s++]:void 0}},u=1,l=0,c=null;return n.eachMapping(function(d){if(c!==null)if(u<d.generatedLine)h(c,a()),u++,l=0;else{var p=i[s]||"",M=p.substr(0,d.generatedColumn-l);i[s]=p.substr(d.generatedColumn-l),l=d.generatedColumn,h(c,M),c=d;return}for(;u<d.generatedLine;)o.add(a()),u++;if(l<d.generatedColumn){var p=i[s]||"";o.add(p.substr(0,d.generatedColumn)),i[s]=p.substr(d.generatedColumn),l=d.generatedColumn}c=d},this),s<i.length&&(c&&h(c,a()),o.add(i.splice(s).join(""))),n.sources.forEach(function(d){var p=n.sourceContentFor(d);p!=null&&(t!=null&&(d=Y.join(t,d)),o.setSourceContent(d,p))}),o;function h(d,p){if(d===null||d.source===void 0)o.add(p);else{var M=t?Y.join(t,d.source):d.source;o.add(new C(d.originalLine,d.originalColumn,M,p,d.name))}}};C.prototype.add=function(r){if(Array.isArray(r))r.forEach(function(n){this.add(n)},this);else if(r[D]||typeof r=="string")r&&this.children.push(r);else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+r);return this};C.prototype.prepend=function(r){if(Array.isArray(r))for(var n=r.length-1;n>=0;n--)this.prepend(r[n]);else if(r[D]||typeof r=="string")this.children.unshift(r);else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+r);return this};C.prototype.walk=function(r){for(var n,t=0,o=this.children.length;t<o;t++)n=this.children[t],n[D]?n.walk(r):n!==""&&r(n,{source:this.source,line:this.line,column:this.column,name:this.name})};C.prototype.join=function(r){var n,t,o=this.children.length;if(o>0){for(n=[],t=0;t<o-1;t++)n.push(this.children[t]),n.push(r);n.push(this.children[t]),this.children=n}return this};C.prototype.replaceRight=function(r,n){var t=this.children[this.children.length-1];return t[D]?t.replaceRight(r,n):typeof t=="string"?this.children[this.children.length-1]=t.replace(r,n):this.children.push("".replace(r,n)),this};C.prototype.setSourceContent=function(r,n){this.sourceContents[Y.toSetString(r)]=n};C.prototype.walkSourceContents=function(r){for(var n=0,t=this.children.length;n<t;n++)this.children[n][D]&&this.children[n].walkSourceContents(r);for(var o=Object.keys(this.sourceContents),n=0,t=o.length;n<t;n++)r(Y.fromSetString(o[n]),this.sourceContents[o[n]])};C.prototype.toString=function(){var r="";return this.walk(function(n){r+=n}),r};C.prototype.toStringWithSourceMap=function(r){var n={code:"",line:1,column:0},t=new Ir(r),o=!1,i=null,s=null,a=null,u=null;return this.walk(function(l,c){n.code+=l,c.source!==null&&c.line!==null&&c.column!==null?((i!==c.source||s!==c.line||a!==c.column||u!==c.name)&&t.addMapping({source:c.source,original:{line:c.line,column:c.column},generated:{line:n.line,column:n.column},name:c.name}),i=c.source,s=c.line,a=c.column,u=c.name,o=!0):o&&(t.addMapping({generated:{line:n.line,column:n.column}}),i=null,o=!1);for(var h=0,d=l.length;h<d;h++)l.charCodeAt(h)===Tr?(n.line++,n.column=0,h+1===d?(i=null,o=!1):o&&t.addMapping({source:c.source,original:{line:c.line,column:c.column},generated:{line:n.line,column:n.column},name:c.name})):n.column++}),this.walkSourceContents(function(l,c){t.setSourceContent(l,c)}),{code:n.code,map:t}};Xe.SourceNode=C});var Ye=w(H=>{H.SourceMapGenerator=fe().SourceMapGenerator;H.SourceMapConsumer=Je().SourceMapConsumer;H.SourceNode=Ze().SourceNode});var er=w((On,He)=>{var Br=Object.prototype.toString,ve=typeof Buffer<"u"&&typeof Buffer.alloc=="function"&&typeof Buffer.allocUnsafe=="function"&&typeof Buffer.from=="function";function Gr(e){return Br.call(e).slice(8,-1)==="ArrayBuffer"}function jr(e,r,n){r>>>=0;var t=e.byteLength-r;if(t<0)throw new RangeError("'offset' is out of bounds");if(n===void 0)n=t;else if(n>>>=0,n>t)throw new RangeError("'length' is out of bounds");return ve?Buffer.from(e.slice(r,r+n)):new Buffer(new Uint8Array(e.slice(r,r+n)))}function Ur(e,r){if((typeof r!="string"||r==="")&&(r="utf8"),!Buffer.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');return ve?Buffer.from(e,r):new Buffer(e,r)}function Fr(e,r,n){if(typeof e=="number")throw new TypeError('"value" argument must not be a number');return Gr(e)?jr(e,r,n):typeof e=="string"?Ur(e,r):ve?Buffer.from(e):new Buffer(e)}He.exports=Fr});var ar=w((T,Se)=>{var Dr=Ye().SourceMapConsumer,me=Oe("path"),L;try{L=Oe("fs"),(!L.existsSync||!L.readFileSync)&&(L=null)}catch{}var qr=er();function rr(e,r){return e.require(r)}var nr=!1,tr=!1,_e=!1,V="auto",P={},$={},kr=/^data:application\/json[^,]+base64,/,O=[],R=[];function we(){return V==="browser"?!0:V==="node"?!1:typeof window<"u"&&typeof XMLHttpRequest=="function"&&!(window.require&&window.module&&window.process&&window.process.type==="renderer")}function zr(){return typeof process=="object"&&process!==null&&typeof process.on=="function"}function Kr(){return typeof process=="object"&&process!==null?process.version:""}function Vr(){if(typeof process=="object"&&process!==null)return process.stderr}function $r(e){if(typeof process=="object"&&process!==null&&typeof process.exit=="function")return process.exit(e)}function ee(e){return function(r){for(var n=0;n<e.length;n++){var t=e[n](r);if(t)return t}return null}}var Ce=ee(O);O.push(function(e){if(e=e.trim(),/^file:/.test(e)&&(e=e.replace(/file:\/\/\/(\w:)?/,function(t,o){return o?"":"/"})),e in P)return P[e];var r="";try{if(L)L.existsSync(e)&&(r=L.readFileSync(e,"utf8"));else{var n=new XMLHttpRequest;n.open("GET",e,!1),n.send(null),n.readyState===4&&n.status===200&&(r=n.responseText)}}catch{}return P[e]=r});function ye(e,r){if(!e)return r;var n=me.dirname(e),t=/^\w+:\/\/[^\/]*/.exec(n),o=t?t[0]:"",i=n.slice(o.length);return o&&/^\/\w\:/.test(i)?(o+="/",o+me.resolve(n.slice(o.length),r).replace(/\\/g,"/")):o+me.resolve(n.slice(o.length),r)}function Wr(e){var r;if(we())try{var n=new XMLHttpRequest;n.open("GET",e,!1),n.send(null),r=n.readyState===4?n.responseText:null;var t=n.getResponseHeader("SourceMap")||n.getResponseHeader("X-SourceMap");if(t)return t}catch{}r=Ce(e);for(var o=/(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg,i,s;s=o.exec(r);)i=s;return i?i[1]:null}var Me=ee(R);R.push(function(e){var r=Wr(e);if(!r)return null;var n;if(kr.test(r)){var t=r.slice(r.indexOf(",")+1);n=qr(t,"base64").toString(),r=e}else r=ye(e,r),n=Ce(r);return n?{url:r,map:n}:null});function Ee(e){var r=$[e.source];if(!r){var n=Me(e.source);n?(r=$[e.source]={url:n.url,map:new Dr(n.map)},r.map.sourcesContent&&r.map.sources.forEach(function(o,i){var s=r.map.sourcesContent[i];if(s){var a=ye(r.url,o);P[a]=s}})):r=$[e.source]={url:null,map:null}}if(r&&r.map&&typeof r.map.originalPositionFor=="function"){var t=r.map.originalPositionFor(e);if(t.source!==null)return t.source=ye(r.url,t.source),t}return e}function ir(e){var r=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(e);if(r){var n=Ee({source:r[2],line:+r[3],column:r[4]-1});return"eval at "+r[1]+" ("+n.source+":"+n.line+":"+(n.column+1)+")"}return r=/^eval at ([^(]+) \((.+)\)$/.exec(e),r?"eval at "+r[1]+" ("+ir(r[2])+")":e}function Qr(){var e,r="";if(this.isNative())r="native";else{e=this.getScriptNameOrSourceURL(),!e&&this.isEval()&&(r=this.getEvalOrigin(),r+=", "),e?r+=e:r+="<anonymous>";var n=this.getLineNumber();if(n!=null){r+=":"+n;var t=this.getColumnNumber();t&&(r+=":"+t)}}var o="",i=this.getFunctionName(),s=!0,a=this.isConstructor(),u=!(this.isToplevel()||a);if(u){var l=this.getTypeName();l==="[object Object]"&&(l="null");var c=this.getMethodName();i?(l&&i.indexOf(l)!=0&&(o+=l+"."),o+=i,c&&i.indexOf("."+c)!=i.length-c.length-1&&(o+=" [as "+c+"]")):o+=l+"."+(c||"<anonymous>")}else a?o+="new "+(i||"<anonymous>"):i?o+=i:(o+=r,s=!1);return s&&(o+=" ("+r+")"),o}function or(e){var r={};return Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach(function(n){r[n]=/^(?:is|get)/.test(n)?function(){return e[n].call(e)}:e[n]}),r.toString=Qr,r}function sr(e,r){if(r===void 0&&(r={nextPosition:null,curPosition:null}),e.isNative())return r.curPosition=null,e;var n=e.getFileName()||e.getScriptNameOrSourceURL();if(n){var t=e.getLineNumber(),o=e.getColumnNumber()-1,i=/^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/,s=i.test(Kr())?0:62;t===1&&o>s&&!we()&&!e.isEval()&&(o-=s);var a=Ee({source:n,line:t,column:o});r.curPosition=a,e=or(e);var u=e.getFunctionName;return e.getFunctionName=function(){return r.nextPosition==null?u():r.nextPosition.name||u()},e.getFileName=function(){return a.source},e.getLineNumber=function(){return a.line},e.getColumnNumber=function(){return a.column+1},e.getScriptNameOrSourceURL=function(){return a.source},e}var l=e.isEval()&&e.getEvalOrigin();return l&&(l=ir(l),e=or(e),e.getEvalOrigin=function(){return l}),e}function Jr(e,r){_e&&(P={},$={});for(var n=e.name||"Error",t=e.message||"",o=n+": "+t,i={nextPosition:null,curPosition:null},s=[],a=r.length-1;a>=0;a--)s.push(`
    at `+sr(r[a],i)),i.nextPosition=i.curPosition;return i.curPosition=i.nextPosition=null,o+s.reverse().join("")}function ur(e){var r=/\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(e.stack);if(r){var n=r[1],t=+r[2],o=+r[3],i=P[n];if(!i&&L&&L.existsSync(n))try{i=L.readFileSync(n,"utf8")}catch{i=""}if(i){var s=i.split(/(?:\r\n|\r|\n)/)[t-1];if(s)return n+":"+t+`
`+s+`
`+new Array(o).join(" ")+"^"}}return null}function Xr(e){var r=ur(e),n=Vr();n&&n._handle&&n._handle.setBlocking&&n._handle.setBlocking(!0),r&&(console.error(),console.error(r)),console.error(e.stack),$r(1)}function Zr(){var e=process.emit;process.emit=function(r){if(r==="uncaughtException"){var n=arguments[1]&&arguments[1].stack,t=this.listeners(r).length>0;if(n&&!t)return Xr(arguments[1])}return e.apply(this,arguments)}}var Yr=O.slice(0),Hr=R.slice(0);T.wrapCallSite=sr;T.getErrorSource=ur;T.mapSourcePosition=Ee;T.retrieveSourceMap=Me;T.install=function(e){if(e=e||{},e.environment&&(V=e.environment,["node","browser","auto"].indexOf(V)===-1))throw new Error("environment "+V+" was unknown. Available options are {auto, browser, node}");if(e.retrieveFile&&(e.overrideRetrieveFile&&(O.length=0),O.unshift(e.retrieveFile)),e.retrieveSourceMap&&(e.overrideRetrieveSourceMap&&(R.length=0),R.unshift(e.retrieveSourceMap)),e.hookRequire&&!we()){var r=rr(Se,"module"),n=r.prototype._compile;n.__sourceMapSupport||(r.prototype._compile=function(i,s){return P[s]=i,$[s]=void 0,n.call(this,i,s)},r.prototype._compile.__sourceMapSupport=!0)}if(_e||(_e="emptyCacheBetweenOperations"in e?e.emptyCacheBetweenOperations:!1),nr||(nr=!0,Error.prepareStackTrace=Jr),!tr){var t="handleUncaughtExceptions"in e?e.handleUncaughtExceptions:!0;try{var o=rr(Se,"worker_threads");o.isMainThread===!1&&(t=!1)}catch{}t&&zr()&&(tr=!0,Zr())}};T.resetRetrieveHandlers=function(){O.length=0,R.length=0,O=Yr.slice(0),R=Hr.slice(0),Me=ee(R),Ce=ee(O)}});ar().install();import{DynamoDBClient as an}from"@aws-sdk/client-dynamodb";import{DynamoDBDocumentClient as ln,TransactWriteCommand as cn}from"@aws-sdk/lib-dynamodb";import{setTimeout as en}from"node:timers/promises";var lr=()=>{},rn={timeoutEarlyInMillis:5,timeoutEarlyResponse:()=>{throw new Error("Timeout")}},nn=(e=lr,r={})=>{typeof e!="function"&&(r=e,e=lr),r={...rn,...r},r.timeoutEarly=r.timeoutEarlyInMillis>0,r.beforePrefetch?.();let n=[],t=[],o=[],i=(s={},a={})=>{r.requestStart?.();let u={event:s,context:a,response:void 0,error:void 0,internal:r.internal??{}};return tn(u,[...n],e,[...t],[...o],r)};return i.use=s=>{Array.isArray(s)||(s=[s]);for(let a of s){let{before:u,after:l,onError:c}=a;if(!u&&!l&&!c)throw new Error('Middleware must be an object containing at least one key among "before", "after", "onError"');u&&i.before(u),l&&i.after(l),c&&i.onError(c)}return i},i.before=s=>(n.push(s),i),i.after=s=>(t.unshift(s),i),i.onError=s=>(o.unshift(s),i),i.handler=s=>(e=s,i),i},tn=async(e,r,n,t,o,i)=>{let s,a=i.timeoutEarly&&e.context.getRemainingTimeInMillis;try{if(await be(e,r,i),typeof e.response>"u"){i.beforeHandler?.();let u=new AbortController;a&&(s=new AbortController),e.response=await Promise.race([n(e.event,e.context,{signal:u.signal}),a?en(e.context.getRemainingTimeInMillis()-i.timeoutEarlyInMillis,void 0,{signal:s.signal}).then(()=>(u.abort(),i.timeoutEarlyResponse())):Promise.race([])]),s?.abort(),i.afterHandler?.(),await be(e,t,i)}}catch(u){s?.abort(),e.response=void 0,e.error=u;try{await be(e,o,i)}catch(l){throw l.originalError=e.error,e.error=l,e.error}if(typeof e.response>"u")throw e.error}finally{await i.requestEnd?.(e)}return e.response},be=async(e,r,n)=>{for(let t of r){n.beforeMiddleware?.(t.name);let o=await t(e);if(n.afterMiddleware?.(t.name),typeof o<"u"){e.response=o;return}}},cr=nn;var N=(e,r)=>{if(typeof e!="string")return e;let n=e[0];if(n!=="{"&&n!=="["&&n!=='"')return e;try{return JSON.parse(e,r)}catch{}return e};var on={wrapNumbers:void 0},hr,sn=(e={})=>{let{wrapNumbers:r}={...on,...e};return hr=r,{before:async t=>{re(t.event)}}},re=e=>{let r=e.eventSource??e.deliveryStreamArn,n=e.Records??e.records??e.messages??e.tasks;if(!Array.isArray(n)){r??=(e.configRuleId&&"aws:config")??(e.awslogs&&"aws:cloudwatch")??(e["CodePipeline.job"]&&"aws:codepipeline"),r&&ne[r]?.(e);return}r??=n[0].eventSource??n[0].EventSource??(n[0].s3Key&&"aws:s3:batch");for(let t of n)ne[r]?.(t)},un=/\+/g,ne={"aws:amq":e=>{e.data=W(e.data)},"aws:cloudwatch":e=>{e.awslogs.data=W(e.awslogs.data)},"aws:codepipeline":e=>{e["CodePipeline.job"].data.actionConfiguration.configuration.UserParameters=N(e["CodePipeline.job"].data.actionConfiguration.configuration.UserParameters)},"aws:config":e=>{e.invokingEvent=N(e.invokingEvent),e.ruleParameters=N(e.ruleParameters)},"aws:dynamodb":e=>{e.dynamodb.Keys=Le(e.dynamodb.Keys),e.dynamodb.NewImage=Le(e.dynamodb.NewImage),e.dynamodb.OldImage=Le(e.dynamodb.OldImage)},"aws:kafka":e=>{for(let r in e.records)for(let n of e.records[r])n.value&&=W(n.value)},"aws:kinesis":e=>{e.kinesis.data=W(e.kinesis.data)},"aws:lambda:events":e=>{e.data=W(e.data)},"aws:s3":e=>{e.s3.object.key=fr(e.s3.object.key)},"aws:s3:batch":e=>{e.s3Key=fr(e.s3Key)},SelfManagedKafka:e=>{ne["aws:kafka"](e)},"aws:sns":e=>{e.Sns.Message=N(e.Sns.Message),re(e.Sns.Message)},"aws:sns:sqs":e=>{e.Message=N(e.Message),re(e.Message)},"aws:sqs":e=>{e.body=N(e.body),e.body.Type==="Notification"?ne["aws:sns:sqs"](e.body):re(e.body)}},W=e=>N(Buffer.from(e,"base64").toString("utf-8")),fr=e=>decodeURIComponent(e.replace(un," ")),Le=e=>q.M(e??{}),q={NULL:()=>null,BOOL:Boolean,N:e=>{if(hr)return{value:e};let r=Number(e);if((Number.MAX_SAFE_INTEGER<r||r<Number.MIN_SAFE_INTEGER)&&r!==Number.NEGATIVE_INFINITY&&r!==Number.POSITIVE_INFINITY)try{return BigInt(e)}catch{throw new Error(`${e} can't be converted to BigInt. Set options.wrapNumbers to get string value.`)}return r},B:e=>e,S:e=>e,L:e=>e.map(r=>dr(r)),M:e=>Object.entries(e).reduce((r,[n,t])=>({...r,[n]:dr(t)}),{}),NS:e=>new Set(e.map(q.N)),BS:e=>new Set(e.map(q.B)),SS:e=>new Set(e.map(q.S))},dr=e=>{for(let[r,n]of Object.entries(e)){if(!q[r])throw new Error(`Unsupported type passed: ${r}`);if(!(typeof n>"u"))return q[r](n)}},pr=sn;var fn=process.env.AWS_REGION,gr=process.env.TABLE_NAME,dn=new an({region:fn}),hn={marshallOptions:{convertEmptyValues:!1,removeUndefinedValues:!1,convertClassInstanceToMap:!1},unmarshallOptions:{wrapNumbers:!1}},pn=async e=>ln.from(dn,hn).send(new cn(e)),gn=async e=>{console.log({event:e,tableName:gr});let r=[];Object.values(e.records).flatMap(n=>n).map(n=>{n.value&&r.push(n.value)}),await Promise.all(r.map(async n=>{console.log({obj:n});try{await pn({TransactItems:[{Update:{TableName:gr,Key:{PK:"B#B",SK:"A#A"},UpdateExpression:"SET something = :something",ExpressionAttributeValues:{":something":n}}}]}),console.log({write:"success"})}catch(t){console.log({write:"failure"}),console.error(t)}}))},Dn=cr(gn).use(pr());export{Dn as handler};
//# sourceMappingURL=data:application/json;base64,
